{"version":3,"file":"static/js/192.f058d4bd.chunk.js","mappings":"8PAqBA,EAlBkB,SAAC,GAAwB,IAAtBA,EAAqB,EAArBA,eACbC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,+BACE,wBACGF,EAAeG,KAAI,SAAAC,GAAa,OAC/B,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAcE,IAAMC,MAAO,CAAEC,KAAMP,GAAxD,SACGG,EAAcK,SAFVL,EAAcE,GADQ,OAUxC,ECsBD,EAtCmB,SAAC,GAAkB,IAAhBI,EAAe,EAAfA,SACpB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAoBA,OACE,+BACE,kBAAMH,SAfW,SAAAI,GACnBA,EAAEC,iBAGmB,KAAjBH,EAAMI,QAMVN,EAASE,GACTC,EAAS,KANPI,MAAM,mBAOT,EAGG,WACE,kBACEC,KAAK,OACLC,KAAK,QACLC,MAAOR,EACPS,SAzBY,SAAAP,GAClBD,EAASC,EAAEQ,cAAcF,MAAMG,cAChC,EAwBOC,aAAa,MACbC,WAAS,KAEX,mBAAQP,KAAK,SAAb,wBAIP,E,SCWD,EA3Ce,WACb,OAAwCQ,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEA,GAA4CjB,EAAAA,EAAAA,UAAS,IAArD,eAAOX,EAAP,KAAuB6B,EAAvB,KA2BA,OApBAC,EAAAA,EAAAA,YAAU,WACR,IAAMlB,EAAQe,EAAaI,IAAI,SAE/B,GAAKnB,EAAL,CAKA,IAAMoB,EAAmB,mCAAG,gHAEEC,EAAAA,EAAAA,IAAsBrB,GAFxB,gBAEhBsB,EAFgB,EAEhBA,QACRL,EAAkBK,GAHM,gDAKxBC,QAAQC,IAAR,MALwB,yDAAH,qDASzBJ,EAAoBpB,EAZnB,CAaF,GAAE,CAACe,KAGF,iCACE,SAAC,EAAD,CAAYjB,SA3BS,SAAAE,GACvBgB,EAAgB,CAAEhB,MAAAA,IAClBiB,EAAkB,GACnB,IA0BI7B,EAAeqC,OAAS,GACvB,SAAC,EAAD,CAAWrC,eAAgBA,KAE3B,kEAIP,C,+LC9CKsC,EAAU,mCAEHL,EAAqB,mCAAG,WAAMrB,GAAN,yFACZ2B,EAAAA,EAAAA,IAAA,4DACgCD,EADhC,kBACiD1B,EADjD,gCADY,uBAC3B4B,EAD2B,EAC3BA,KAD2B,kBAK5BA,GAL4B,2CAAH,sDAQrBC,EAAqB,mCAAG,sGACZF,EAAAA,EAAAA,IAAA,kEACsCD,IAF1B,uBAC3BE,EAD2B,EAC3BA,KAD2B,kBAK5BA,GAL4B,2CAAH,qDAQrBE,EAAiB,mCAAG,WAAMC,GAAN,yFACRJ,EAAAA,EAAAA,IAAA,6CACiBI,EADjB,oBACoCL,EADpC,oBADQ,uBACvBE,EADuB,EACvBA,KADuB,kBAKxBA,GALwB,2CAAH,sDAQjBI,EAAoB,mCAAG,WAAMD,GAAN,yFACXJ,EAAAA,EAAAA,IAAA,6CACiBI,EADjB,4BAC4CL,EAD5C,oBADW,uBAC1BE,EAD0B,EAC1BA,KAD0B,kBAK3BA,GAL2B,2CAAH,sDAQpBK,EAAoB,mCAAG,WAAMF,GAAN,yFACXJ,EAAAA,EAAAA,IAAA,6CACiBI,EADjB,6BAC6CL,EAD7C,2BADW,uBAC1BE,EAD0B,EAC1BA,KAD0B,kBAK3BA,GAL2B,2CAAH,qD","sources":["components/MovieList/MovieList.jsx","components/SearchForm/SearchForm.jsx","pages/Movies.jsx","sevices.api/api.js"],"sourcesContent":["import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst MovieList = ({ searchedMovies }) => {\n  const location = useLocation();\n\n  return (\n    <>\n      <ul>\n        {searchedMovies.map(searchedMovie => (\n          <li key={searchedMovie.id}>\n            <Link to={`/movies/${searchedMovie.id}`} state={{ from: location }}>\n              {searchedMovie.title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default MovieList;\n","import React from 'react';\nimport { useState } from 'react';\n\nconst SearchForm = ({ onSubmit }) => {\n  const [query, setQuery] = useState('');\n\n  const handleInput = e => {\n    setQuery(e.currentTarget.value.toLowerCase());\n  };\n\n  // on form submitting\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    //   if query is empty or consists of spaces\n    if (query.trim() === '') {\n      alert('Enter your query');\n      return;\n    }\n\n    //   fetching movies\n    onSubmit(query);\n    setQuery('');\n  };\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"query\"\n          value={query}\n          onChange={handleInput}\n          autoComplete=\"off\"\n          autoFocus\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n    </>\n  );\n};\n\nexport default SearchForm;\n","import MovieList from 'components/MovieList/MovieList';\nimport SearchForm from 'components/SearchForm/SearchForm';\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { requestSearchedMovies } from 'sevices.api/api';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const [searchedMovies, setsearchedMovies] = useState([]);\n\n  const handleFormSubmit = query => {\n    setSearchParams({ query });\n    setsearchedMovies([]);\n  };\n\n  useEffect(() => {\n    const query = searchParams.get('query');\n\n    if (!query) {\n      return;\n    }\n\n    // fetching movies by query\n    const fetchSearchedMovies = async () => {\n      try {\n        const { results } = await requestSearchedMovies(query);\n        setsearchedMovies(results);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchSearchedMovies(query);\n  }, [searchParams]);\n\n  return (\n    <>\n      <SearchForm onSubmit={handleFormSubmit} />\n\n      {searchedMovies.length > 0 ? (\n        <MovieList searchedMovies={searchedMovies} />\n      ) : (\n        <p>Nothing found... try different query</p>\n      )}\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst API_KEY = '520b1f5cc874bee72fc625fe9511a989';\n\nexport const requestSearchedMovies = async query => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${query}&page=1&include_adult=false`\n  );\n\n  return data;\n};\n\nexport const requestTrendingMovies = async () => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`\n  );\n\n  return data;\n};\n\nexport const requestMoviesById = async movieId => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\nexport const requestMoviesCredits = async movieId => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\nexport const requestMoviesReviews = async movieId => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n\n  return data;\n};\n\n// export const requestMoviesGenres = async movieId => {\n//   const { data } = await axios.get(\n//     `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}`\n//   );\n\n//   return data;\n// };\n"],"names":["searchedMovies","location","useLocation","map","searchedMovie","to","id","state","from","title","onSubmit","useState","query","setQuery","e","preventDefault","trim","alert","type","name","value","onChange","currentTarget","toLowerCase","autoComplete","autoFocus","useSearchParams","searchParams","setSearchParams","setsearchedMovies","useEffect","get","fetchSearchedMovies","requestSearchedMovies","results","console","log","length","API_KEY","axios","data","requestTrendingMovies","requestMoviesById","movieId","requestMoviesCredits","requestMoviesReviews"],"sourceRoot":""}